{% assign pageTitle = "Werk - Label Vier" %}
{% render 'partials/head.liquid', pageTitle: pageTitle %}
<script src="/scripts/script.js" defer></script>

{% render 'partials/header.liquid' %}
<main>

  <section class="cases-section">
      <h1><strong>Projecten</strong> waar we trots op zijn!</h1>
        <ul class="cases-list">
        {% for case in cases %}
          <li class="cases-list-item">
            <a href="/cases/case/{{ case.id }}" class="cases-grid">
                <div class="cases-img">
                  <img alt="{{ case.title.rendered }}" src="{{ case.yoast_head_json.og_image[0].url }}">
                </div>

                <section class="cases-info"> 
                    <h2><span>{{ case.title.rendered }}</span></h2>
                    <p>{{ case.content.rendered | strip_html | truncatewords: 32 }}</p>
                    <span class="cases-detail-link">
                        lees verder <img src="/img/arrow-right-black.svg" alt="" width="15" height="15">
                    </span>
                </section>
              </a>
            </li>
        {% endfor %}
        </ul> 
  </section>

  <nav class="page-switch">
    <ol>
      {% if currentPage > 1 %}
        <li>
          <a class="arrow" href="/cases/page{{ currentPage | minus: 1 }}">
            <img src="/img/arrow-left-white.svg" width="25px" height="25px" alt="Vorige pagina">
          </a>
        </li>
      {% endif %}

      {% for pagina in (1..totalPages) %}
      <li class="{% if pagina == currentPage %}active{% endif %}">
        <a href="/cases/page{{ pagina }}">{{ pagina }}</a>
      </li>
      {% endfor %}
    
      {% if currentPage < totalPages %}
        <li>
          <a class="arrow" href="/cases/page{{ currentPage | plus: 1 }}">
            <img src="/img/arrow-right-white.svg" width="25px" height="25px" alt="Volgende pagina">
          </a>
        </li>
      {% endif %}
    </ol>
  </nav>

  <div class="cases-nieuwsbrief">
    <h3>Schrijf je in voor de <strong>nieuwsbrief!</strong></h3>
  
    <form action="/nieuwsbrief" method="POST" data-enhanced="form">
        <label for="email" class="visually-hidden">E-mailadres</label>
        <input type="email" id="email" name="email" placeholder="E-mailadres" required>
        <button type="submit">
            <span class="button-text">Inschrijven</span>
            <span class="loader"></span>
        </button>
    </form>
  </div>

</main>

{% render 'partials/footer.liquid' %}

<script type="module">
    // We maken hieronder aannames over wat de browser ondersteunt
    // Dus laten we deze eerst testen met Feature Detection
    // https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Testing/Feature_detection
    // Als er ergens op de pagina een formulier wordt gesubmit..
    // (We maken hier gebruik van Event Delegation)
    document.addEventListener('submit', async function(event) {

    // Hou in een variabele bij welk formulier dat was
    const form = event.target;

    // Als dit formulier geen data-enhanced attribuut heeft, doe dan niks
    // Dit doen we, zodat we sommige formulieren op de pagina kunnen 'enhancen'
    // Data attributen mag je zelf verzinnen; dit is dus niet iets speciaals
    // https://developer.mozilla.org/en-US/docs/Learn_web_development/Howto/Solve_HTML_problems/Use_data_attributes
    if (!form.hasAttribute('data-enhanced')) {
      return;
    }

    // Voorkom de standaard submit van de browser
    // Let op: hiermee overschrijven we de default Loading state van de browser...
    event.preventDefault();

    let formData = new FormData(form)

    form.classList.add('loader');
    
    // Doe een fetch naar de server, net als hoe de browser dit normaal zou doen
    // Gebruik daarvoor het action en method attribuut van het originele formulier
    // Inclusief alle formulierelementen
    const response = await fetch(form.action, {
    method: form.method,
    body: new URLSearchParams(formData)
    });

    // Converteer de serverrespons naar JSON
    const responseText = await response.text();

    // Normaal zou de browser die HTML parsen en weergeven, maar daar moeten we nu zelf iets mee
    // Parse de nieuwe HTML en maak hiervan een nieuw Document Object Model in het geheugen
    const parser = new DOMParser();
    const responseDOM = parser.parseFromString(responseText, 'text/html');
    
    console.log(responseDOM);
    
    form.classList.remove('loader');

    const buttonText = form.querySelector('.button-text');
    buttonText.textContent = "Ingeschreven";

    form.reset();
});

</script>
